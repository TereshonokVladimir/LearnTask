{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.upload = upload;\nfunction bytesToSize(bytes) {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  if (!bytes) return '0 Byte';\n  const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n  return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];\n}\n\nconst element = (tag, classes = [], content) => {\n  const node = document.createElement(tag);\n\n  if (classes.length) {\n    node.classList.add(...classes);\n  }\n\n  if (content) {\n    node.textContent = content;\n  }\n\n  return node;\n};\n\nfunction noop() {}\n\nfunction upload(selector, options = {}) {\n  let files = [];\n  const onUpload = options.onUpload || noop;\n  const input = document.querySelector(selector);\n  const preview = element('div', ['preview']);\n  const open = element('button', ['btn'], 'Open');\n  const upload = element('button', ['btn', 'primary'], 'Upload');\n  upload.style.display = 'none';\n\n  if (options.multi) {\n    input.setAttribute('multiple', true);\n  }\n\n  if (options.accept && Array.isArray(options.accept)) {\n    input.setAttribute('accept', options.accept.join(','));\n  }\n\n  input.insertAdjacentElement('afterend', preview);\n  input.insertAdjacentElement('afterend', upload);\n  input.insertAdjacentElement('afterend', open);\n\n  const triggerInput = () => input.click();\n\n  const changeHandler = event => {\n    if (!event.target.files.length) {\n      return;\n    }\n\n    files = Array.from(event.target.files);\n    preview.innerHTML = '';\n    upload.style.display = 'inline';\n\n    files.forEach(file => {\n      // if (!file.type.match('image')) {\n      //     return\n      // }\n\n      const reader = new FileReader();\n\n      reader.onload = ev => {\n        const src = ev.target.result;\n        preview.insertAdjacentHTML('afterbegin', `\n                    <div class=\"preview-image\">\n                    <div class=\"preview-remove\" data-name=\"${file.name}\">&times;</div>\n                        <img src=\"${src}\" alt=\"${file.name}\"/>\n                        <div class=\"preview-info\">\n                            <span>${file.name}</span>\n                            ${bytesToSize(file.size)}\n                        </div>\n                    </div>    \n                `);\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const removeHandler = event => {\n    if (!event.target.dataset.name) {\n      return;\n    }\n\n    const { name } = event.target.dataset;\n    files = files.filter(file => file.name !== name);\n\n    if (!files.length) {\n      upload.style.display = 'none';\n    }\n\n    const block = preview.querySelector(`[data-name=\"${name}\"]`).closest('.preview-image');\n\n    block.classList.add('removing');\n    setTimeout(() => block.remove(), 300);\n  };\n\n  const clearPreview = el => {\n    el.style.bottom = '4px';\n    el.innerHTML = '<div class=\"preview-info-progress\"></div>';\n  };\n\n  const uploadHandler = () => {\n    preview.querySelectorAll('.preview-remove').forEach(e => e.remove());\n    const previewInfo = preview.querySelectorAll('.preview-info');\n    previewInfo.forEach(clearPreview);\n    onUpload(files, previewInfo);\n  };\n\n  open.addEventListener('click', triggerInput);\n  input.addEventListener('change', changeHandler);\n  preview.addEventListener('click', removeHandler);\n  upload.addEventListener('click', uploadHandler);\n}"},"hash":"c3a72d2c66316d179d1500d8b3710cd9"}